# -*- coding: utf-8 -*-
"""Decision Tree dengan Algoritma CART

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lIQgXkNoZqFEXVtF_mmbOU_CcJ2t6mES

Decision Tree dengan Algoritma CART

https://medium.com/codex/building-and-visualizing-decision-tree-in-python-2cfaafd8e1bb
"""

from google.colab import drive
drive.mount('/content/drive/')

import os
os.environ["KAGGLE_CONFIG_DIR"] = '/content/drive/MyDrive/dataset'

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/dataset/

!kaggle datasets download -d prathamtripathi/drug-classification
!kaggle datasets download -d andrewmvd/heart-failure-clinical-data

!unzip drug-classification

import pandas as pd # data processing
import numpy as np # working with arrays
import matplotlib.pyplot as plt # visualization
from matplotlib import rcParams # figure size
from termcolor import colored as cl # text customization

from sklearn.tree import DecisionTreeClassifier as dtc # tree algorithm
from sklearn.model_selection import train_test_split # splitting the data
from sklearn.metrics import accuracy_score # model precision
from sklearn.tree import plot_tree # tree diagram

from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
import pickle

rcParams['figure.figsize'] = (25, 20)

import pandas as pd

df = pd.read_csv('penawaran.csv')
df

df.info()

d = {'male': 0, 'female': 1}
df['gender'] = df['gender'].map(d)


d = {'muda': 0, 'menengah': 1, 'tua': 2}
df['usia'] = df['usia'].map(d)

d = {'cash': 0, 'credit card': 1, 'cheque': 2}
df['pembayaran'] = df['pembayaran'].map(d)

d = {'menikah': 0, 'belum menikah': 1}
df['status'] = df['status'].map(d)

d = {'no': 0, 'yes': 1}
df['customer'] = df['customer'].map(d)

print(df)

df.info()

for i in df.gender.values:
    if i  == 'male':
        df.gender.replace(i, 0, inplace = True)
    elif i == 'female':
        df.gender.replace(i, 1, inplace = True)
for i in df.usia.values:
    if i  == 'muda':
        df.usia.replace(i, 0, inplace = True)
    elif i == 'menengah':
        df.usia.replace(i, 1, inplace = True)
    elif i == 'tua':
        df.usia.replace(i, 2, inplace = True)            
for i in df.pembayaran.values:
    if i  == 'credit card':
        df.pembayaran.replace(i, 0, inplace = True)
    elif i == 'cash':
        df.pembayaran.replace(i, 1, inplace = True)
    elif i == 'cheque':
        df.pembayaran.replace(i, 2, inplace = True)
for i in df.status.values:
    if i  == 'belum menikah':
        df.status.replace(i, 0, inplace = True)
    elif i == 'menikah':
        df.status.replace(i, 1, inplace = True)      
for i in df.customer.values:
    if i  == 'no':
        df.customer.replace(i, 0, inplace = True)
    elif i == 'yes':
        df.customer.replace(i, 1, inplace = True)

print(cl(df, attrs = ['bold']))

X_var = df[['gender', 'usia', 'pembayaran', 'status']].values # independent variable
y_var = df['customer'].values # dependent variable

print(cl('X variable samples : {}'.format(X_var[:15]), attrs = ['bold']))
print(cl('Y variable samples : {}'.format(y_var[:15]), attrs = ['bold']))

X_train, X_test, y_train, y_test = train_test_split(X_var, y_var, test_size = 0.2, random_state = 0)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

model = dtc(criterion = 'gini', max_depth = 4)
model.fit(X_train, y_train)

pred_model = model.predict(X_test)

print(cl('Accuracy of the model is {:.0%}'.format(accuracy_score(y_test, pred_model)), attrs = ['bold']))

features = ['gender', 'usia', 'pembayaran', 'status']
X = df[features]
y = df['customer']

model.fit(X, y)

pickle.dump(model, open('modeltree.pkl','wb'))

dtree = dtc()
dtree = dtree.fit(X, y)

tree.plot_tree(dtree, feature_names=features)
plt.savefig('tree_visualization.png')



